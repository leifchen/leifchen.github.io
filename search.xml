<?xml version="1.0" encoding="utf-8"?>
<search> 
  
    
    <entry>
      <title>【Hello】反射</title>
      <link href="/hello/reflect.html"/>
      <url>/hello/reflect.html</url>
      
        <content type="html"><![CDATA[<p><strong>介绍</strong><br>Java 反射机制是在运行状态中，对于任意一个类，都能够知道这个类的所有属性和方法；对于任意一个对象，都能够调用它的任意方法和属性；这种动态获取信息以及动态调用对象方法的功能称为 Java 语言的反射机制。<br><a id="more"></a></p><h1 id="反射"><a href="#反射" class="headerlink" title="反射"></a>反射</h1><h2 id="Class-类"><a href="#Class-类" class="headerlink" title="Class 类"></a>Class 类</h2><p>类是对象，类是 <code>java.lang.Class</code> 类的实例对象，这个对象也称为类的类型。</p><p>实例对象的类类型的三种表达方式：</p><ol>  <li><code>类名.class</code></li>  <li><code>实例对象.getClass()</code></li>  <li><code>Class.forName(&quot;类的全称&quot;)</code> // 类的全称：包名 + 类名</li></ol><p><strong><em>Code</em></strong></p><ul>  <li>Target.java</li></ul><figure class="highlight java">  <table>    <tr>      <td class="gutter">        <pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre>      </td>      <td class="code">        <pre><span class="line"><span class="meta">@Setter</span></span><br><span class="line"><span class="meta">@Getter</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Target</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> age;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Target</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = <span class="string">"LeifChen"</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre>      </td>    </tr>  </table></figure><ul>  <li>ReflectDemo.java</li></ul><figure class="highlight java">  <table>    <tr>      <td class="gutter">        <pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre>      </td>      <td class="code">        <pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ReflectDemo</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Target target = <span class="keyword">new</span> Target();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 1.任何一个类都有一个隐含的静态成员变量 class</span></span><br><span class="line">        Class c1 = Target.class;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 2.通过实例对象的 getClass() 方法</span></span><br><span class="line">        Class c2 = target.getClass();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 3.通过 Class.forName ("类名字符串")</span></span><br><span class="line">        Class c3 = <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            c3 = Class.forName(<span class="string">"com.chen.reflect.Target"</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (ClassNotFoundException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        System.out.println(c1 == c2);</span><br><span class="line">        System.out.println(c2 == c3);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">// 需要无参数的构造方法</span></span><br><span class="line">            Target target2 = (Target) c1.newInstance();</span><br><span class="line">            System.out.println(target2.getName());</span><br><span class="line">        &#125; <span class="keyword">catch</span> (InstantiationException | IllegalAccessException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre>      </td>    </tr>  </table></figure><h2 id="动态加载类"><a href="#动态加载类" class="headerlink" title="动态加载类"></a>动态加载类</h2><ul>  <li>1.静态加载类：编译时刻加载类</li>  <li>2.动态加载类：运行时刻加载类</li></ul><p>new 创建对象，是静态加载类。</p><h2 id="通过反射获取类的信息"><a href="#通过反射获取类的信息" class="headerlink" title="通过反射获取类的信息"></a>通过反射获取类的信息</h2><ol>  <li>获取构造函数 <code>java.lang.reflect.Constructor&lt;T&gt;</code></li>  <li>获取方法 <code>java.lang.reflect.Method</code></li>  <li>获取成员变量 <code>java.lang.reflect.Field</code></li></ol><p><strong><em>Code</em></strong></p><ul>  <li>ReflectUtil.java</li></ul><figure class="highlight java">  <table>    <tr>      <td class="gutter">        <pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br></pre>      </td>      <td class="code">        <pre><span class="line"><span class="keyword">import</span> java.lang.reflect.Constructor;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Field;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Method;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * ReflectUtil</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Author</span> LeifChen</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Date</span> 2018-09-28</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ReflectUtil</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 打印类的构造函数</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> obj</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">printConstrutorMethods</span><span class="params">(Object obj)</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"类的构造函数："</span>);</span><br><span class="line"></span><br><span class="line">        Class c = obj.getClass();</span><br><span class="line">        Constructor[] constructors = c.getDeclaredConstructors();</span><br><span class="line">        <span class="keyword">for</span> (Constructor constructor : constructors) &#123;</span><br><span class="line">            <span class="comment">// 构造函数的名称</span></span><br><span class="line">            System.out.print(constructor.getName() + <span class="string">"("</span>);</span><br><span class="line">            <span class="comment">// 构造函数的参数类型</span></span><br><span class="line">            Class[] paramTypes = constructor.getParameterTypes();</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; paramTypes.length; i++) &#123;</span><br><span class="line">                System.out.print(paramTypes[i].getSimpleName());</span><br><span class="line">                <span class="keyword">if</span> (i &lt; paramTypes.length - <span class="number">1</span>) &#123;</span><br><span class="line">                    System.out.print(<span class="string">","</span>);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            System.out.println(<span class="string">")"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 打印类的方法</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> obj</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">printMethods</span><span class="params">(Object obj)</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"类的方法："</span>);</span><br><span class="line"></span><br><span class="line">        Class c = obj.getClass();</span><br><span class="line">        Method[] methods = c.getDeclaredMethods();</span><br><span class="line">        <span class="keyword">for</span> (Method method : methods) &#123;</span><br><span class="line">            <span class="comment">// 方法的返回值类型的类类型</span></span><br><span class="line">            Class rtnType = method.getReturnType();</span><br><span class="line">            System.out.print(rtnType.getSimpleName() + <span class="string">" "</span>);</span><br><span class="line">            <span class="comment">// 方法名称</span></span><br><span class="line">            System.out.print(method.getName() + <span class="string">"("</span>);</span><br><span class="line">            <span class="comment">// 方法的参数类型</span></span><br><span class="line">            Class[] paramTypes = method.getParameterTypes();</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; paramTypes.length; i++) &#123;</span><br><span class="line">                System.out.print(paramTypes[i].getSimpleName());</span><br><span class="line">                <span class="keyword">if</span> (i &lt; paramTypes.length - <span class="number">1</span>) &#123;</span><br><span class="line">                    System.out.print(<span class="string">","</span>);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            System.out.println(<span class="string">")"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 打印类的成员变量</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> obj</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">printFields</span><span class="params">(Object obj)</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"类的成员变量："</span>);</span><br><span class="line"></span><br><span class="line">        Class c = obj.getClass();</span><br><span class="line">        Field[] fields = c.getDeclaredFields();</span><br><span class="line">        <span class="keyword">for</span> (Field field : fields) &#123;</span><br><span class="line">            <span class="comment">// 成员变量的类型的类类型</span></span><br><span class="line">            Class fieldType = field.getType();</span><br><span class="line">            String typeName = fieldType.getSimpleName();</span><br><span class="line">            <span class="comment">// 成员变量的名称</span></span><br><span class="line">            String fieldName = field.getName();</span><br><span class="line">            System.out.println(typeName + <span class="string">" "</span> + fieldName);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre>      </td>    </tr>  </table></figure><ul>  <li>测试方法 Main.java</li></ul><figure class="highlight java">  <table>    <tr>      <td class="gutter">        <pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre>      </td>      <td class="code">        <pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Main</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        String s = <span class="string">"hello"</span>;</span><br><span class="line">        System.out.println(<span class="string">"类的全称是："</span> + s.getClass().getName());</span><br><span class="line">        ReflectUtil.printConstrutorMethods(s);</span><br><span class="line">        ReflectUtil.printMethods(s);</span><br><span class="line">        ReflectUtil.printFields(s);</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">"====================================="</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">int</span> i = <span class="number">100</span>;</span><br><span class="line">        System.out.println(<span class="string">"类的全称是："</span> + Integer.class.getName());</span><br><span class="line">        ReflectUtil.printConstrutorMethods(i);</span><br><span class="line">        ReflectUtil.printMethods(i);</span><br><span class="line">        ReflectUtil.printFields(i);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre>      </td>    </tr>  </table></figure><h2 id="方法反射"><a href="#方法反射" class="headerlink" title="方法反射"></a>方法反射</h2><p>方法的名称和方法的参数列表才能唯一决定某个方法。<br><code>Method method = c.getDeclaredMethod(&quot;方法名&quot;，可变参数列表（参数类型.class）)</code><br><code>method.invoke(对象，参数列表)</code></p><p><strong><em>Code</em></strong></p><ul>  <li>ReflectDemo2.java</li></ul><figure class="highlight java">  <table>    <tr>      <td class="gutter">        <pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre>      </td>      <td class="code">        <pre><span class="line"><span class="keyword">import</span> java.lang.reflect.InvocationTargetException;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Method;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * ReflectDemo2</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Author</span> LeifChen</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Date</span> 2018-09-28</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ReflectDemo2</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        MyClass my = <span class="keyword">new</span> MyClass();</span><br><span class="line">        Class c = my.getClass();</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            Method method1 = c.getMethod(<span class="string">"print"</span>);</span><br><span class="line">            method1.invoke(my);</span><br><span class="line"></span><br><span class="line">            System.out.println(<span class="string">"====="</span>);</span><br><span class="line">            Method method2 = c.getMethod(<span class="string">"print"</span>, <span class="keyword">int</span>.class, <span class="keyword">int</span>.class);</span><br><span class="line">            method2.invoke(my, <span class="number">10</span>, <span class="number">20</span>);</span><br><span class="line"></span><br><span class="line">            System.out.println(<span class="string">"====="</span>);</span><br><span class="line">            Method method3 = c.getMethod(<span class="string">"print"</span>, String.class, String.class);</span><br><span class="line">            method3.invoke(my, <span class="string">"hello"</span>, <span class="string">"reflect"</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (NoSuchMethodException | IllegalAccessException | InvocationTargetException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyClass</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">print</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"Print"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">print</span><span class="params">(<span class="keyword">int</span> a, <span class="keyword">int</span> b)</span> </span>&#123;</span><br><span class="line">        System.out.println(a + b);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">print</span><span class="params">(String a, String b)</span> </span>&#123;</span><br><span class="line">        System.out.println(a.toUpperCase() + <span class="string">" "</span> + b.toUpperCase());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre>      </td>    </tr>  </table></figure><h2 id="集合的泛型"><a href="#集合的泛型" class="headerlink" title="集合的泛型"></a>集合的泛型</h2><p>集合在编译期会检查泛型，而编译后的集合是去泛型化的。因此，可以通过反射，绕过编辑器的泛型检查，从而了解集合的泛型本质。</p><p><strong><em>Code</em></strong></p><ul>  <li>ReflectDemo3.java</li></ul><figure class="highlight java">  <table>    <tr>      <td class="gutter">        <pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre>      </td>      <td class="code">        <pre><span class="line"><span class="keyword">import</span> java.lang.reflect.InvocationTargetException;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Method;</span><br><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * ReflectDemo3</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Author</span> LeifChen</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Date</span> 2018-09-28</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ReflectDemo3</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        List list1 = <span class="keyword">new</span> ArrayList();</span><br><span class="line">        List&lt;String&gt; list2 = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        list2.add(<span class="string">"hello"</span>);</span><br><span class="line">        <span class="comment">// 编译期检查错误</span></span><br><span class="line">        <span class="comment">/* list2.add(100); */</span></span><br><span class="line"></span><br><span class="line">        Class c1 = list1.getClass();</span><br><span class="line">        Class c2 = list2.getClass();</span><br><span class="line">        <span class="comment">// true：说明编译之后集合的泛型是去泛型化的</span></span><br><span class="line">        System.out.println(c1 == c2);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 使用反射可以绕过编译期的泛型检查</span></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            Method method = c2.getMethod(<span class="string">"add"</span>, Object.class);</span><br><span class="line">            method.invoke(list2, <span class="number">100</span>);</span><br><span class="line">            System.out.println(list2);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (NoSuchMethodException | IllegalAccessException | InvocationTargetException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre>      </td>    </tr>  </table></figure>]]></content>
      
      
      <categories>
          
          <category> 【Hello】系列 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
            <tag> 反射 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>【Hello】动态代理</title>
      <link href="/hello/dynamic-proxy.html"/>
      <url>/hello/dynamic-proxy.html</url>
      
        <content type="html"><![CDATA[<p><strong>介绍</strong><br>Spring AOP 的底层实现有两种方式：一种是 JDK 动态代理，另一种是 CGLib 动态代理。<br>JDK 动态代理主要涉及 <code>java.lang.reflect</code> 包下边的两个类：<code>Proxy</code> 和 <code>InvocationHandler</code> 。其中 <code>InvocationHandler</code> 是一个接口，可以通过实现该接口定义横切逻辑，并通过反射机制调用目标类的代码，动态地将横切逻辑和业务逻辑编织在一起。</p><p>JDK 动态代理的限制，是它只能为接口创建代理实例。对于没有通过接口定义业务方法的类，只能通过 CGLib 创建动态代理实例。</p><p>CGLib 动态代理采用底层的字节码技术，全称是 Code Generation Library ，CGLib 可以为一个类创建一个子类，在子类中采用方法拦截的技术拦截所有父类方法的调用并顺势织入横切逻辑。<br><a id="more"></a></p><h1 id="动态代理"><a href="#动态代理" class="headerlink" title="动态代理"></a>动态代理</h1><h2 id="Proxy"><a href="#Proxy" class="headerlink" title="Proxy"></a>Proxy</h2><p><code>public object invoke(Object obj, Method method, Object[] args)</code></p><ul>  <li>obj : 代理对象</li>  <li>method : 代理的方法</li>  <li>args : 代理方法的参数</li></ul><h2 id="InvocationHandler"><a href="#InvocationHandler" class="headerlink" title="InvocationHandler"></a>InvocationHandler</h2><p><code>static Object newProxyInstance(ClassLoader loader, Class&lt;?&gt;[] interfaces, InvocationHandler h)</code></p><ul>  <li>loader : 类加载器</li>  <li>interfaces : 实现接口</li>  <li>h : 事件处理器</li></ul><h2 id="JDK-动态代理"><a href="#JDK-动态代理" class="headerlink" title="JDK 动态代理"></a>JDK 动态代理</h2><p>实现原理：</p><ul>  <li>通过实现 <code>InvocationHandler</code> 接口创建自己的调用处理器</li>  <li>通过为 <code>Proxy</code> 类指定 <code>ClassLoader</code> 对象和一组 <code>interface</code> 来创建动态代理</li>  <li>通过反射机制获取动态代理类的构造函数，其唯一参数类型就是调用处理器接口类型</li>  <li>通过构造函数创建动态代理类实例，构造时调用处理器对象作为参数参入</li></ul><p>JDK 动态代理是面向接口的代理模式，如果被代理目标没有接口那么 Spring 也无能为力，Spring 通过 Java 的反射机制生产被代理接口的新的匿名实现类，重写了其中 AOP 的增强方法。</p><h2 id="CGLib-动态代理"><a href="#CGLib-动态代理" class="headerlink" title="CGLib 动态代理"></a>CGLib 动态代理</h2><p>实现原理:</p><p>CGLib 是一个强大、高性能的 Code 生产类库，可以实现运行期动态扩展 java 类，Spring 在运行期间通过 CGLib 继承要被动态代理的类，重写父类的方法，实现 AOP 面向切面编程呢。</p><h2 id="Spring-AOP-动态代理的方式选择"><a href="#Spring-AOP-动态代理的方式选择" class="headerlink" title="Spring AOP 动态代理的方式选择"></a>Spring AOP 动态代理的方式选择</h2><ul>  <li>如果要被代理的对象是个实现类，那么 Spring 会使用 JDK 动态代理来完成操作（Spirng 默认采用 JDK 动态代理实现机制）</li>  <li>如果要被代理的对象不是个实现类，那么 Spring 会强制使用 CGLib 来实现动态代理</li></ul><h2 id="JDK、CGLib-两者比较"><a href="#JDK、CGLib-两者比较" class="headerlink" title="JDK、CGLib 两者比较"></a>JDK、CGLib 两者比较</h2><ul>  <li>JDK 动态代理是面向接口的</li>  <li>CGLib 动态代理是通过字节码底层继承要代理类来实现（如果被代理类被 final 关键字所修饰，则无法实现）</li></ul><p>CGLib 所创建的动态代理对象在实际运行时候的性能要比 JDK 动态代理高，CGLib 在创建对象的时候所花费的时间比 JDK 动态代理多。因此，对于单例的代理对象或者具有实例池的代理，因为无需频繁的创建代理对象，所以比较适合采用 CGLib 动态代理，反之则比较适用 JDK 动态代理。</p><h2 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h2><p><img src="/images/proxy/proxy-structure.jpg" alt="代码目录"></p><ul>  <li>Target.java</li></ul><figure class="highlight java">  <table>    <tr>      <td class="gutter">        <pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre>      </td>      <td class="code">        <pre><span class="line"><span class="keyword">package</span> com.chen.dynamic;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 目标类的接口</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Author</span> LeifChen</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Date</span> 2018-09-27</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Target</span> </span>&#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 测试方法</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> i</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">test</span><span class="params">(<span class="keyword">int</span> i)</span></span>;</span><br><span class="line">&#125;</span><br></pre>      </td>    </tr>  </table></figure><ul>  <li>TargetImpl.java</li></ul><figure class="highlight java">  <table>    <tr>      <td class="gutter">        <pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre>      </td>      <td class="code">        <pre><span class="line"><span class="keyword">package</span> com.chen.dynamic;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 目标类的实现</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Author</span> LeifChen</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Date</span> 2018-09-27</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TargetImpl</span> <span class="keyword">implements</span> <span class="title">Target</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">test</span><span class="params">(<span class="keyword">int</span> i)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> i+<span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre>      </td>    </tr>  </table></figure><ul>  <li>JdkDynamicProxy.java</li></ul><figure class="highlight java">  <table>    <tr>      <td class="gutter">        <pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre>      </td>      <td class="code">        <pre><span class="line"><span class="keyword">package</span> com.chen.dynamic;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.InvocationHandler;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Method;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Proxy;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * JDK 动态代理</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Author</span> LeifChen</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Date</span> 2018-09-27</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">JdkDynamicProxy</span> <span class="keyword">implements</span> <span class="title">InvocationHandler</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Target target;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">JdkDynamicProxy</span><span class="params">(Target target)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.target = target;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 返回目标类的代理实例</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> target</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Target <span class="title">newProxyInstance</span><span class="params">(Target target)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> (Target) Proxy.newProxyInstance(JdkDynamicProxy.class.getClassLoader(),</span><br><span class="line">                <span class="keyword">new</span> Class&lt;?&gt;[]&#123;Target.class&#125;,</span><br><span class="line">                <span class="keyword">new</span> JdkDynamicProxy(target));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">invoke</span><span class="params">(Object proxy, Method method, Object[] args)</span> <span class="keyword">throws</span> Throwable </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> method.invoke(target, args);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre>      </td>    </tr>  </table></figure><ul>  <li>CglibProxy.java</li></ul><figure class="highlight java">  <table>    <tr>      <td class="gutter">        <pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre>      </td>      <td class="code">        <pre><span class="line"><span class="keyword">package</span> com.chen.dynamic;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.cglib.proxy.Enhancer;</span><br><span class="line"><span class="keyword">import</span> org.springframework.cglib.proxy.MethodInterceptor;</span><br><span class="line"><span class="keyword">import</span> org.springframework.cglib.proxy.MethodProxy;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Method;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * CGLib 动态代理</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Author</span> LeifChen</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Date</span> 2018-09-27</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CglibProxy</span> <span class="keyword">implements</span> <span class="title">MethodInterceptor</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">CglibProxy</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 获取目标类的代理实例</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> targetInstanceClazz</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> &lt;T&gt;</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> &lt;T extends Target&gt; <span class="function">Target <span class="title">newProxyInstance</span><span class="params">(Class&lt;T&gt; targetInstanceClazz)</span> </span>&#123;</span><br><span class="line">        Enhancer enhancer = <span class="keyword">new</span> Enhancer();</span><br><span class="line">        enhancer.setSuperclass(targetInstanceClazz);</span><br><span class="line">        enhancer.setCallback(<span class="keyword">new</span> CglibProxy());</span><br><span class="line">        <span class="keyword">return</span> (Target) enhancer.create();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">intercept</span><span class="params">(Object obj, Method method, Object[] args, MethodProxy methodProxy)</span> <span class="keyword">throws</span> Throwable </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> methodProxy.invokeSuper(obj, args);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre>      </td>    </tr>  </table></figure><ul>  <li>ProxyPerformance.java</li></ul><figure class="highlight java">  <table>    <tr>      <td class="gutter">        <pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre>      </td>      <td class="code">        <pre><span class="line"><span class="keyword">package</span> com.chen.dynamic;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.LinkedHashMap;</span><br><span class="line"><span class="keyword">import</span> java.util.Map;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * ProxyPerformance</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Author</span> LeifChen</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Date</span> 2018-09-27</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ProxyPerformance</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 创建测试对象</span></span><br><span class="line">        Target nativeTest = <span class="keyword">new</span> TargetImpl();</span><br><span class="line">        Target dynamicProxy = JdkDynamicProxy.newProxyInstance(nativeTest);</span><br><span class="line">        Target cglibProxy = CglibProxy.newProxyInstance(TargetImpl.class);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 执行测试</span></span><br><span class="line">        Map&lt;String, Target&gt; tests = <span class="keyword">new</span> LinkedHashMap&lt;&gt;();</span><br><span class="line">        tests.put(<span class="string">"Native       "</span>, nativeTest);</span><br><span class="line">        tests.put(<span class="string">"JDK Dynamic  "</span>, dynamicProxy);</span><br><span class="line">        tests.put(<span class="string">"CGLib Dynamic"</span>, cglibProxy);</span><br><span class="line">        <span class="keyword">int</span> repeatCount = <span class="number">3</span>;</span><br><span class="line">        <span class="keyword">int</span> runCount = <span class="number">1000000</span>;</span><br><span class="line">        runTest(repeatCount, runCount, tests);</span><br><span class="line">        runCount = <span class="number">50000000</span>;</span><br><span class="line">        runTest(repeatCount, runCount, tests);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">runTest</span><span class="params">(<span class="keyword">int</span> repeatCount, <span class="keyword">int</span> runCount, Map&lt;String, Target&gt; tests)</span> </span>&#123;</span><br><span class="line">        System.out.println(</span><br><span class="line">                String.format(<span class="string">"=== run test : [repeatCount=%s] [runCount=%s] [java.version=%s] === "</span>,</span><br><span class="line">                        repeatCount, runCount, System.getProperty(<span class="string">"java.version"</span>))</span><br><span class="line">        );</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; repeatCount; i++) &#123;</span><br><span class="line">            System.out.println(</span><br><span class="line">                    String.format(<span class="string">"--- test: [%s] ---"</span>, i + <span class="number">1</span>)</span><br><span class="line">            );</span><br><span class="line">            <span class="keyword">for</span> (String key : tests.keySet()) &#123;</span><br><span class="line">                runWithMonitor(tests.get(key), runCount, key);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">runWithMonitor</span><span class="params">(Target target, <span class="keyword">int</span> runCount, String tag)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">long</span> start = System.currentTimeMillis();</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; runCount; i++) &#123;</span><br><span class="line">            target.test(i);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">long</span> end = System.currentTimeMillis();</span><br><span class="line">        System.out.println(<span class="string">"["</span> + tag + <span class="string">"] Total Time: "</span> + (end - start) + <span class="string">"ms"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre>      </td>    </tr>  </table></figure><ul>  <li>结果</li></ul><p><img src="/images/proxy/proxy-result.jpg" alt="测试结果"></p>]]></content>
      
      
      <categories>
          
          <category> 【Hello】系列 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> 动态代理 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>【Hello】线程</title>
      <link href="/hello/thread.html"/>
      <url>/hello/thread.html</url>
      
        <content type="html"><![CDATA[<p><strong>介绍</strong><br>线程是指程序在执行过程中，能够执行程序代码的一个执行单元。在 Java 语言中，线程有四种状态：运行、就绪、挂起、结束。<br>进程是指一段正在执行的程序。而线程也被成为轻量级的进程，一个进程可以拥有多个线程。<br><a id="more"></a></p><h1 id="线程"><a href="#线程" class="headerlink" title="线程"></a>线程</h1><p>参考视频：</p><ol>  <li><a href="https://www.imooc.com/learn/202" target="_blank" rel="noopener">《深入浅出Java多线程》</a></li>  <li><a href="https://www.imooc.com/learn/312" target="_blank" rel="noopener">《细说多线程之Thread VS Runnable》</a></li></ol><h2 id="Java-标准库——java-lang-Thread"><a href="#Java-标准库——java-lang-Thread" class="headerlink" title="Java 标准库——java.lang.Thread"></a>Java 标准库——java.lang.Thread</h2><p>1.线程的创建</p><ul>  <li><code>Thread()</code></li>  <li><code>Thread(String name)</code></li>  <li><code>Thread(Runnable target)</code></li>  <li><code>Thread(Runnable target, String name)</code></li></ul><p>2.启动线程</p><ul>  <li><code>void start()</code></li></ul><p>3.线程休眠</p><ul>  <li><code>static void sleep (long millis)</code></li>  <li><code>static void sleep (long millis, int nanos)</code></li></ul><p>4.使其他线程等待当前线程终止</p><ul>  <li><code>void join ()</code></li>  <li><code>void join (long millis)</code></li>  <li><code>void join (long millis, int nanos)</code></li></ul><p>5.当前运行线程释放处理器资源</p><ul>  <li><code>static void yield ()</code></li></ul><p>6.返回当前运行的线程引用</p><ul>  <li><code>static Thread currentThread ()</code></li></ul><p>特别注意：线程的终止，应使用退出标志，而不是<code>interrupt()</code></p><h2 id="Thread-VS-Runnable"><a href="#Thread-VS-Runnable" class="headerlink" title="Thread VS Runnable"></a>Thread VS Runnable</h2><ol>  <li>Runnable 方式可以避免 Thread 方式由于 Java 单继承特性带来的缺陷。</li>  <li>Runnable 的代码可以被多个线程共享，适合于多个线程处理同一资源的情况。</li></ol><h2 id="守护线程"><a href="#守护线程" class="headerlink" title="守护线程"></a>守护线程</h2><p>运行在后台，为其他前台线程服务。一旦所有用户线程都结束运行，守护线程会随 JVM 一起结束工作。<br>垃圾回收 GC 就是最常见的守护线程。</p><p>设置守护线程 <code>setDaemon(true)</code> 需在 <code>start()</code> 方法之前调用，否则会抛出 <code>IllegalThreadStateException</code> 异常。</p>]]></content>
      
      
      <categories>
          
          <category> 【Hello】系列 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> 线程 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>【Hello】ElasticSearch</title>
      <link href="/hello/elastic-search.html"/>
      <url>/hello/elastic-search.html</url>
      
        <content type="html"><![CDATA[<p><strong>介绍</strong><br>ElasticSearch 是一个基于 Lucene 的搜索服务器。它提供了一个分布式多用户能力的全文搜索引擎，基于 RESTful web 接口。<br><a id="more"></a></p><h1 id="ElasticSearch"><a href="#ElasticSearch" class="headerlink" title="ElasticSearch"></a>ElasticSearch</h1><p>介绍 Elastic Search ，包括安装、插件、配置。</p><h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><p>到<a href="https://www.elastic.co/cn/products/elasticsearch" target="_blank" rel="noopener">官网</a>下载 ElasticSearch 并解压，然后运行 bin/elasticsearch (or bin\elasticsearch.bat on Windows)，在浏览器打开 <code>http://localhost:9200/</code> 查看是否运行。</p><p><img src="/images/elastic-search/elasticsearch.png" alt="elasticsearch"></p><h2 id="可视化插件"><a href="#可视化插件" class="headerlink" title="可视化插件"></a>可视化插件</h2><p><a href="https://github.com/mobz/elasticsearch-head" target="_blank" rel="noopener">mobz/elasticsearch-head</a></p><p>根据 README 的安装步骤；</p><ol>  <li>git clone git://github.com/mobz/elasticsearch-head.git</li>  <li>cd elasticsearch-head</li>  <li>npm install</li>  <li>npm run start</li>  <li>open <code>http://localhost:9100/</code></li></ol><p>未连接 ElasticSearch 时：</p><p><img src="/images/elastic-search/elasticsearch-head-1.png" alt="elasticsearch-head-1"></p><p>已连接 ElasticSearch 时：</p><p><img src="/images/elastic-search/elasticsearch-head-2.png" alt="elasticsearch-head-2"></p><h2 id="与SpringBoot集成"><a href="#与SpringBoot集成" class="headerlink" title="与SpringBoot集成"></a>与SpringBoot集成</h2><p>通过 Gradle 构建，添加 ElasticSearch 依赖项时，同时需要引进相关插件 transport-netty3-client 依赖项。</p>]]></content>
      
      
      <categories>
          
          <category> 【Hello】系列 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Elastic Search </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>【Hello】Hexo</title>
      <link href="/hello/hexo.html"/>
      <url>/hello/hexo.html</url>
      
        <content type="html"><![CDATA[<p><strong>介绍</strong><br>使用 Hexo + GitHub Page 搭建个人博客，记录个人的学习成长。<br><img src="/images/hexo/hexo-logo.png" alt="hexo-logo"><br><a id="more"></a></p><h1 id="Hexo"><a href="#Hexo" class="headerlink" title="Hexo"></a>Hexo</h1><h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><p>进入<a href="https://hexo.io/zh-cn/" target="_blank" rel="noopener">Hexo官网</a>，按照教程提示，依次输入以下命令，便完成了 Hexo 的安装。</p><figure class="highlight bash">  <table>    <tr>      <td class="gutter">        <pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre>      </td>      <td class="code">        <pre><span class="line">npm install hexo-cli -g</span><br><span class="line">hexo init blog</span><br><span class="line"><span class="built_in">cd</span> blog</span><br><span class="line">npm install</span><br><span class="line">hexo server</span><br></pre>      </td>    </tr>  </table></figure><h2 id="配置文件-config-yml"><a href="#配置文件-config-yml" class="headerlink" title="配置文件 _config.yml"></a>配置文件 _config.yml</h2><ul>  <li>主题</li></ul><figure class="highlight yml">  <table>    <tr>      <td class="gutter">        <pre><span class="line">1</span><br></pre>      </td>      <td class="code">        <pre><span class="line"><span class="attr">theme:</span> <span class="string">next</span></span><br></pre>      </td>    </tr>  </table></figure><p>替换默认主题，本站的主题为 <a href="https://github.com/theme-next/hexo-theme-next" target="_blank" rel="noopener">hexo-theme-next</a></p><ul>  <li>集成 Github</li></ul><figure class="highlight yml">  <table>    <tr>      <td class="gutter">        <pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre>      </td>      <td class="code">        <pre><span class="line"><span class="attr">deploy:</span></span><br><span class="line"><span class="attr">  type:</span> <span class="string">git</span></span><br><span class="line"><span class="attr">  repository:</span> <span class="string">git@github.com:leifchen/leifchen.github.io.git</span></span><br><span class="line"><span class="attr">  branch:</span> <span class="string">master</span></span><br></pre>      </td>    </tr>  </table></figure><p>需安装插件 <code>npm install hexo-deployer-git --save</code>，<code>hexo d</code> 命令用于发布。</p>]]></content>
      
      
      <categories>
          
          <category> 【Hello】系列 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Hexo </tag>
            
            <tag> Blog </tag>
            
        </tags>
      
    </entry>
    
  
  
</search>
