<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>LeifChen</title>
  
  <subtitle>专注学习，码出高效</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://leifchen.github.io/"/>
  <updated>2018-09-29T07:04:47.009Z</updated>
  <id>http://leifchen.github.io/</id>
  
  <author>
    <name>LeifChen</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>【数据结构】03-栈</title>
    <link href="http://leifchen.github.io/data-structure/stack.html"/>
    <id>http://leifchen.github.io/data-structure/stack.html</id>
    <published>2018-09-29T06:08:00.000Z</published>
    <updated>2018-09-29T07:04:47.009Z</updated>
    
    <summary type="html">
    
      &lt;p&gt;&lt;strong&gt;介绍&lt;/strong&gt;&lt;br&gt;栈是一种”&lt;strong&gt;后进先出（LIFO）&lt;/strong&gt;“的数据结构。插入操作也称作&lt;strong&gt;入栈（push）&lt;/strong&gt;，在堆栈的顶部添加一个新元素；删除操作也称作&lt;strong&gt;出栈（pop）&lt;/strong&gt;，移除堆栈的栈顶元素。&lt;br&gt;&lt;img src=&quot;/images/data-structure/stack.png&quot; alt=&quot;Stack&quot;&gt;&lt;br&gt;
    
    </summary>
    
      <category term="【数据结构】" scheme="http://leifchen.github.io/categories/data-structure/"/>
    
    
      <category term="Java" scheme="http://leifchen.github.io/tags/Java/"/>
    
      <category term="Stack" scheme="http://leifchen.github.io/tags/Stack/"/>
    
  </entry>
  
  <entry>
    <title>【数据结构】02-队列</title>
    <link href="http://leifchen.github.io/data-structure/queue.html"/>
    <id>http://leifchen.github.io/data-structure/queue.html</id>
    <published>2018-09-29T06:05:51.000Z</published>
    <updated>2018-09-29T06:59:41.767Z</updated>
    
    <summary type="html">
    
      &lt;p&gt;&lt;strong&gt;介绍&lt;/strong&gt;&lt;br&gt;队列是一种”&lt;strong&gt;先进先出（FIFO）&lt;/strong&gt;“的线性数据结构。插入操作也称作&lt;strong&gt;入队（enqueue）&lt;/strong&gt;，新元素始终被添加在队列的末尾。 删除操作也被称为&lt;strong&gt;出队（dequeue）&lt;/strong&gt;，只能移除第一个元素。&lt;br&gt;&lt;img src=&quot;/images/data-structure/queue.png&quot; alt=&quot;Queue&quot;&gt;&lt;br&gt;
    
    </summary>
    
      <category term="【数据结构】" scheme="http://leifchen.github.io/categories/data-structure/"/>
    
    
      <category term="Java" scheme="http://leifchen.github.io/tags/Java/"/>
    
      <category term="Queue" scheme="http://leifchen.github.io/tags/Queue/"/>
    
  </entry>
  
  <entry>
    <title>【数据结构】01.数组</title>
    <link href="http://leifchen.github.io/data-structure/array.html"/>
    <id>http://leifchen.github.io/data-structure/array.html</id>
    <published>2018-09-29T01:47:55.000Z</published>
    <updated>2018-09-29T06:12:58.954Z</updated>
    
    <summary type="html">
    
      &lt;p&gt;&lt;strong&gt;介绍&lt;/strong&gt;&lt;br&gt;数组是一种基本的数据结构，用于按顺序存储元素的集合。支持随机访问，可以快速查询。&lt;br&gt;&lt;img src=&quot;/images/data-structure/array.png&quot; alt=&quot;Array&quot;&gt;&lt;br&gt;
    
    </summary>
    
      <category term="【数据结构】" scheme="http://leifchen.github.io/categories/data-structure/"/>
    
    
      <category term="Java" scheme="http://leifchen.github.io/tags/Java/"/>
    
      <category term="Array" scheme="http://leifchen.github.io/tags/Array/"/>
    
  </entry>
  
  <entry>
    <title>【Hello】反射</title>
    <link href="http://leifchen.github.io/hello/reflect.html"/>
    <id>http://leifchen.github.io/hello/reflect.html</id>
    <published>2018-09-28T03:38:20.000Z</published>
    <updated>2018-09-28T12:37:49.560Z</updated>
    
    <summary type="html">
    
      &lt;p&gt;&lt;strong&gt;介绍&lt;/strong&gt;&lt;br&gt;Java 反射机制是在运行状态中，对于任意一个类，都能够知道这个类的所有属性和方法；对于任意一个对象，都能够调用它的任意方法和属性；这种动态获取信息以及动态调用对象方法的功能称为 Java 语言的反射机制。&lt;br&gt;
    
    </summary>
    
      <category term="【Hello】系列" scheme="http://leifchen.github.io/categories/hello/"/>
    
    
      <category term="Java" scheme="http://leifchen.github.io/tags/Java/"/>
    
      <category term="反射" scheme="http://leifchen.github.io/tags/%E5%8F%8D%E5%B0%84/"/>
    
  </entry>
  
  <entry>
    <title>【Hello】动态代理</title>
    <link href="http://leifchen.github.io/hello/dynamic-proxy.html"/>
    <id>http://leifchen.github.io/hello/dynamic-proxy.html</id>
    <published>2018-09-27T06:38:50.000Z</published>
    <updated>2018-09-28T03:40:04.275Z</updated>
    
    <summary type="html">
    
      &lt;p&gt;&lt;strong&gt;介绍&lt;/strong&gt;&lt;br&gt;Spring AOP 的底层实现有两种方式：一种是 JDK 动态代理，另一种是 CGLib 动态代理。&lt;br&gt;JDK 动态代理主要涉及 &lt;code&gt;java.lang.reflect&lt;/code&gt; 包下边的两个类：&lt;code&gt;Proxy&lt;/code&gt; 和 &lt;code&gt;InvocationHandler&lt;/code&gt; 。其中 &lt;code&gt;InvocationHandler&lt;/code&gt; 是一个接口，可以通过实现该接口定义横切逻辑，并通过反射机制调用目标类的代码，动态地将横切逻辑和业务逻辑编织在一起。&lt;/p&gt;
&lt;p&gt;JDK 动态代理的限制，是它只能为接口创建代理实例。对于没有通过接口定义业务方法的类，只能通过 CGLib 创建动态代理实例。&lt;/p&gt;
&lt;p&gt;CGLib 动态代理采用底层的字节码技术，全称是 Code Generation Library ，CGLib 可以为一个类创建一个子类，在子类中采用方法拦截的技术拦截所有父类方法的调用并顺势织入横切逻辑。&lt;br&gt;
    
    </summary>
    
      <category term="【Hello】系列" scheme="http://leifchen.github.io/categories/hello/"/>
    
    
      <category term="Java" scheme="http://leifchen.github.io/tags/Java/"/>
    
      <category term="动态代理" scheme="http://leifchen.github.io/tags/%E5%8A%A8%E6%80%81%E4%BB%A3%E7%90%86/"/>
    
  </entry>
  
  <entry>
    <title>【Hello】线程</title>
    <link href="http://leifchen.github.io/hello/thread.html"/>
    <id>http://leifchen.github.io/hello/thread.html</id>
    <published>2018-09-26T11:56:56.000Z</published>
    <updated>2018-09-28T03:40:10.124Z</updated>
    
    <summary type="html">
    
      &lt;p&gt;&lt;strong&gt;介绍&lt;/strong&gt;&lt;br&gt;线程是指程序在执行过程中，能够执行程序代码的一个执行单元。在 Java 语言中，线程有四种状态：运行、就绪、挂起、结束。&lt;br&gt;进程是指一段正在执行的程序。而线程也被成为轻量级的进程，一个进程可以拥有多个线程。&lt;br&gt;
    
    </summary>
    
      <category term="【Hello】系列" scheme="http://leifchen.github.io/categories/hello/"/>
    
    
      <category term="Java" scheme="http://leifchen.github.io/tags/Java/"/>
    
      <category term="线程" scheme="http://leifchen.github.io/tags/%E7%BA%BF%E7%A8%8B/"/>
    
  </entry>
  
  <entry>
    <title>【Hello】ElasticSearch</title>
    <link href="http://leifchen.github.io/hello/elastic-search.html"/>
    <id>http://leifchen.github.io/hello/elastic-search.html</id>
    <published>2018-09-18T09:22:00.000Z</published>
    <updated>2018-09-28T03:39:45.854Z</updated>
    
    <summary type="html">
    
      &lt;p&gt;&lt;strong&gt;介绍&lt;/strong&gt;&lt;br&gt;ElasticSearch 是一个基于 Lucene 的搜索服务器。它提供了一个分布式多用户能力的全文搜索引擎，基于 RESTful web 接口。&lt;br&gt;
    
    </summary>
    
      <category term="【Hello】系列" scheme="http://leifchen.github.io/categories/hello/"/>
    
    
      <category term="Elastic Search" scheme="http://leifchen.github.io/tags/Elastic-Search/"/>
    
  </entry>
  
  <entry>
    <title>【Hello】Hexo</title>
    <link href="http://leifchen.github.io/hello/hexo.html"/>
    <id>http://leifchen.github.io/hello/hexo.html</id>
    <published>2018-09-06T12:18:38.000Z</published>
    <updated>2018-09-28T03:39:58.949Z</updated>
    
    <summary type="html">
    
      &lt;p&gt;&lt;strong&gt;介绍&lt;/strong&gt;&lt;br&gt;使用 Hexo + GitHub Page 搭建个人博客，记录个人的学习成长。&lt;br&gt;&lt;img src=&quot;/images/hexo/hexo-logo.png&quot; alt=&quot;hexo-logo&quot;&gt;&lt;br&gt;
    
    </summary>
    
      <category term="【Hello】系列" scheme="http://leifchen.github.io/categories/hello/"/>
    
    
      <category term="Hexo" scheme="http://leifchen.github.io/tags/Hexo/"/>
    
      <category term="Blog" scheme="http://leifchen.github.io/tags/Blog/"/>
    
  </entry>
  
</feed>
